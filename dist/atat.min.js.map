{"version":3,"sources":["webpack://atat/webpack/universalModuleDefinition","webpack://atat/webpack/bootstrap","webpack://atat/./src/common.ts","webpack://atat/./src/helpers.ts","webpack://atat/./src/inline.ts","webpack://atat/./src/regexp.ts","webpack://atat/./src/compiler.ts","webpack://atat/./src/fileResolvers/DefaultFileResolver.ts","webpack://atat/./src/options.ts","webpack://atat/./src/tags.ts","webpack://atat/./src/context.ts","webpack://atat/./src/atat.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","m","noop","VALUE_NAME_OUTSIDE","VALUE_NAME_INSIDE","HTML_RULES","\"","&","'","/","<",">","MATCH_HTML","helpers","encode","code","toString","replace","join","array","separator","Array","prototype","call","json","obj","JSON","stringify","lower","str","toLowerCase","upper","toUpperCase","merge","src","dest","x","hasOwnProperty","loop","fn","Object","i","l","length","loopAsync","callback","ready","finished","results","cb","index","err","res","escapeQuotes","chars","_i","arguments","String","trim","result","indexOf","charAt","substring","trimString","inlineTags","(@!\\()([^]*?)(\\)@)","inside","ctx","value","e","(@\\()([^]*?)(\\)@)","(@layout\\()([^]*?)(\\)@)","layout","atat","loadAndParse","options","template","context","parent","(@partial\\()([^]*?)(\\)@)","Error","args_1","split","uri","shift","partials","push","output","(@section\\()([^]*?)(\\)@)","matchRecursive","left","right","outerStart","innerStart","leftMatch","rightMatch","global","sticky","openTokens","delimStart","delimEnd","lastOuterEnd","regexpExec","name","slice","start","end","regexpTest","regexp","pos","lastIndex","test","match","exec","cleanArray","splice","compiler_AtatCompiler","AtatCompiler","compile","input","_this","this","tags","open","close","block","loopCallback","compileInline","compiler","innerEnd","lastEnd","leftStart","matchInline","inline","parts","name_2","DEFAULT_OPTIONS","it","$","fileResolver","loadFile","path","readFile","@\\{","@for\\s*\\(","blocks","out","@function\\s+[$A-Za-z0-9]*\\s*\\(","@if\\s*\\(","@section\\s+[$A-Za-z0-9]*\\s*\\{","sections","parse","@while\\s*\\(","context_AtatContext","AtatContext","section","compilers","item","opts","model","regexps","RegExp","getTags","getTagsInline","d","__webpack_exports__","config","optionsArg","callbackArg","Promise","resolve","reject","render","Function","body","content","loadAndRender","__express","c","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","t","mode","__esModule","ns","create","key","bind","n","object","property","p","s","moduleId","modules"],"mappings":"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","file":"atat.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"atat\"] = factory();\n\telse\n\t\troot[\"atat\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// tslint:disable-next-line: no-empty\r\nexport function noop() { }\r\nexport var VALUE_NAME_OUTSIDE = 'outside';\r\nexport var VALUE_NAME_INSIDE = 'inside';\r\nexport var HTML_RULES = {\r\n    '\"': '&#34;',\r\n    '&': '&#38;',\r\n    \"'\": '&#39;',\r\n    '/': '&#47;',\r\n    '<': '&#60;',\r\n    '>': '&#62;',\r\n};\r\nexport var CLEAR_TAGS = /[-[\\](){}*+?.,\\\\^$|#\\s]/g;\r\nexport var MATCH_HTML = /&(?!#?\\w+;)|<|>|\"|'|\\//g;\r\n","import { HTML_RULES, MATCH_HTML, } from './common';\r\nexport var helpers = {\r\n    encode: encodeHtml,\r\n    join: joinHelper,\r\n    json: jsonStringify,\r\n    lower: lowercaseHelper,\r\n    upper: uppercaseHelper,\r\n};\r\nexport function merge(src, dest) {\r\n    if (dest === void 0) { dest = {}; }\r\n    for (var x in src) {\r\n        if (!dest.hasOwnProperty(x) && src.hasOwnProperty(x)) {\r\n            if (typeof src[x] === 'object') {\r\n                dest[x] = merge(src[x]);\r\n            }\r\n            else {\r\n                dest[x] = src[x];\r\n            }\r\n        }\r\n    }\r\n    return dest;\r\n}\r\nexport function getTags(tags) {\r\n    var regexps = [];\r\n    loop(tags, function (compiler, regexp) {\r\n        if (regexps.indexOf(regexp) === -1) {\r\n            regexps.push(regexp);\r\n        }\r\n    });\r\n    var compilers = [];\r\n    loop(tags, function (compiler, regexp) {\r\n        compilers.push({\r\n            compiler: compiler,\r\n            regexp: new RegExp(regexp, 'g'),\r\n        });\r\n    });\r\n    return {\r\n        compilers: compilers,\r\n        close: /}@/g,\r\n        open: new RegExp(regexps.join('|'), 'g'),\r\n    };\r\n}\r\nexport function getTagsInline(inlineTags) {\r\n    var regexps = [];\r\n    loop(inlineTags, function (compiler, regexp) {\r\n        regexps.push(regexp);\r\n    });\r\n    regexps.push('(@[A-Za-z0-9$]+\\\\()([^]*?)(\\\\)@)');\r\n    return new RegExp(regexps.join('|'), 'g');\r\n}\r\nexport function loop(array, fn) {\r\n    if (Object.prototype.toString.call(array) !== '[object Array]') {\r\n        for (var x in array) {\r\n            if (array.hasOwnProperty(x)) {\r\n                fn(array[x], x, array);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    for (var i = 0, l = array.length; i < l; i += 1) {\r\n        fn(array[i], i, array);\r\n    }\r\n}\r\nexport function loopAsync(array, fn, callback) {\r\n    var ready = 0;\r\n    var finished = false;\r\n    var results = [];\r\n    var length = array.length;\r\n    for (var i = 0; i < length; i += 1) {\r\n        fn(array[i], i, array, cb(i));\r\n    }\r\n    function cb(index) {\r\n        return function (err, res) {\r\n            if (finished) {\r\n                return;\r\n            }\r\n            if (err) {\r\n                finished = true;\r\n                callback(err);\r\n                return;\r\n            }\r\n            results[index] = res;\r\n            ready += 1;\r\n            if (ready === length) {\r\n                finished = true;\r\n                callback(null, results);\r\n            }\r\n        };\r\n    }\r\n}\r\nexport function encodeHtml(code) {\r\n    if (code === void 0) { code = ''; }\r\n    return code.toString().replace(MATCH_HTML, function (m) {\r\n        return HTML_RULES[m] || m;\r\n    });\r\n}\r\nexport function trimString(str) {\r\n    var chars = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        chars[_i - 1] = arguments[_i];\r\n    }\r\n    if (chars.length === 0) {\r\n        return String.prototype.trim.call(str);\r\n    }\r\n    var result = str;\r\n    while (chars.indexOf(str.charAt(0)) >= 0) {\r\n        result = str.substring(1);\r\n    }\r\n    while (chars.indexOf(str.charAt(str.length - 1)) >= 0) {\r\n        result = str.substring(0, str.length - 1);\r\n    }\r\n    return result;\r\n}\r\nexport function escapeQuotes(str) {\r\n    return trimString(str)\r\n        .replace(/^\"(.*)\"$/g, '$1')\r\n        .replace(/^'(.*)'$/g, '$1');\r\n}\r\nexport function jsonStringify(obj) {\r\n    return JSON.stringify(obj);\r\n}\r\nexport function joinHelper(array, separator) {\r\n    if (array === void 0) { array = []; }\r\n    if (separator === void 0) { separator = ''; }\r\n    return Array.prototype.join.call(array, separator);\r\n}\r\nexport function uppercaseHelper(str) {\r\n    if (str === void 0) { str = ''; }\r\n    return str.toString().toUpperCase();\r\n}\r\nexport function lowercaseHelper(str) {\r\n    if (str === void 0) { str = ''; }\r\n    return str.toString().toLowerCase();\r\n}\r\nexport function resolveUrl(base, relative) {\r\n    var stack = base.split('/');\r\n    var parts = relative.split('/');\r\n    stack.pop();\r\n    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\r\n        var part = parts_1[_i];\r\n        if (part === '.') {\r\n            continue;\r\n        }\r\n        if (part === '..') {\r\n            stack.pop();\r\n        }\r\n        else {\r\n            stack.push(part);\r\n        }\r\n    }\r\n    return stack.join('/');\r\n}\r\n","import { atat } from './atat';\r\nimport { escapeQuotes } from './helpers';\r\nexport var inlineTags = {\r\n    '(@!\\\\()([^]*?)(\\\\)@)': outputAsHtml,\r\n    '(@\\\\()([^]*?)(\\\\)@)': outputAsText,\r\n    '(@layout\\\\()([^]*?)(\\\\)@)': compileLayout,\r\n    '(@partial\\\\()([^]*?)(\\\\)@)': compilePartial,\r\n    '(@section\\\\()([^]*?)(\\\\)@)': outputSection,\r\n};\r\nfunction outputAsText(inside, ctx, callback) {\r\n    try {\r\n        var val = inside.value.trim();\r\n        if (val === '') {\r\n            callback();\r\n        }\r\n        callback(null, \"this.output += this.helpers.encode(\" + inside.value.trim() + \");\");\r\n    }\r\n    catch (e) {\r\n        callback(e);\r\n    }\r\n}\r\nfunction outputAsHtml(inside, ctx, callback) {\r\n    try {\r\n        var val = inside.value.trim();\r\n        if (val === '') {\r\n            callback();\r\n        }\r\n        callback(null, \"this.output += (\" + inside.value.trim() + \");\");\r\n    }\r\n    catch (e) {\r\n        callback(e);\r\n    }\r\n}\r\nfunction compileLayout(inside, ctx, callback) {\r\n    try {\r\n        if (ctx.layout) {\r\n            return callback();\r\n        }\r\n        atat.loadAndParse(escapeQuotes(inside.value), ctx.options, function (err, template) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            ctx.layout = template;\r\n            template.context.parent = ctx;\r\n            callback();\r\n        });\r\n    }\r\n    catch (e) {\r\n        callback(e);\r\n    }\r\n}\r\nfunction compilePartial(inside, ctx, callback) {\r\n    try {\r\n        var value = inside.value.trim();\r\n        if (value === '') {\r\n            return callback(new Error('Partial parsing error'));\r\n        }\r\n        var args_1 = value.split(/\\s*,\\s*/g);\r\n        var uri = escapeQuotes(args_1.shift());\r\n        atat.loadAndParse(uri, ctx.options, function (err, template) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            ctx.partials.push(template);\r\n            template.context.parent = ctx;\r\n            var output = \"this.output += this.partials[\" + (ctx.partials.length -\r\n                1) + \"](\" + args_1 + \");\";\r\n            callback(null, output);\r\n        });\r\n    }\r\n    catch (e) {\r\n        callback(e);\r\n    }\r\n}\r\nfunction outputSection(inside, ctx, callback) {\r\n    try {\r\n        var name_1 = escapeQuotes(inside.value);\r\n        var output = \"this.output += (function(){var s = this.section('\" + name_1 + \"'); \" +\r\n            (\"return s?s(\" + ctx.arguments + \"):\\\"\\\";}).call(this);\");\r\n        callback(null, output);\r\n    }\r\n    catch (e) {\r\n        callback(e);\r\n    }\r\n}\r\nexport function outputCallHelper(inside, ctx, callback) {\r\n    try {\r\n        var name_2 = inside.left.value.substring(1, inside.left.value.length - 1);\r\n        if (typeof ctx.helpers[name_2] !== 'function') {\r\n            throw new Error(\"Helper \" + name_2 + \" isn't declarated\");\r\n        }\r\n        callback(null, \"this.output += this.helpers.\" + name_2 + \"(\" + inside.value.trim() + \");\");\r\n    }\r\n    catch (e) {\r\n        callback(e);\r\n    }\r\n}\r\n","import { VALUE_NAME_INSIDE, VALUE_NAME_OUTSIDE } from './common';\r\nexport function matchRecursive(str, left, right) {\r\n    var global = left.global;\r\n    var sticky = left.sticky;\r\n    var output = [];\r\n    var openTokens = 0;\r\n    var delimStart = 0;\r\n    var delimEnd = 0;\r\n    var lastOuterEnd = 0;\r\n    var outerStart;\r\n    var innerStart;\r\n    var leftMatch;\r\n    var rightMatch;\r\n    while (true) {\r\n        leftMatch = regexpExec(str, left, delimEnd);\r\n        rightMatch = regexpExec(str, right, delimEnd);\r\n        // Keep the leftmost match only\r\n        if (leftMatch && rightMatch) {\r\n            if (leftMatch.index <= rightMatch.index) {\r\n                rightMatch = null;\r\n            }\r\n            else {\r\n                leftMatch = null;\r\n            }\r\n        }\r\n        // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):\r\n        // LM | RM | OT | Result\r\n        // 1  | 0  | 1  | loop\r\n        // 1  | 0  | 0  | loop\r\n        // 0  | 1  | 1  | loop\r\n        // 0  | 1  | 0  | throw\r\n        // 0  | 0  | 1  | throw\r\n        // 0  | 0  | 0  | break\r\n        // The paths above don't include the sticky mode special case. The loop ends after the\r\n        // first completed match if not `global`.\r\n        if (leftMatch || rightMatch) {\r\n            delimStart = (leftMatch || rightMatch).index;\r\n            delimEnd = delimStart + (leftMatch || rightMatch)[0].length;\r\n        }\r\n        else if (!openTokens) {\r\n            break;\r\n        }\r\n        if (sticky && !openTokens && delimStart > lastOuterEnd) {\r\n            break;\r\n        }\r\n        if (leftMatch) {\r\n            if (!openTokens) {\r\n                outerStart = delimStart;\r\n                innerStart = delimEnd;\r\n            }\r\n            openTokens += 1;\r\n        }\r\n        else if (rightMatch && openTokens) {\r\n            openTokens -= 1;\r\n            if (!openTokens) {\r\n                if (outerStart > lastOuterEnd) {\r\n                    output.push({\r\n                        name: VALUE_NAME_OUTSIDE,\r\n                        value: str.slice(lastOuterEnd, outerStart),\r\n                        start: lastOuterEnd,\r\n                        end: outerStart,\r\n                    });\r\n                }\r\n                output.push({\r\n                    name: VALUE_NAME_INSIDE,\r\n                    value: str.slice(innerStart, delimStart),\r\n                    start: innerStart,\r\n                    end: delimStart,\r\n                    left: {\r\n                        value: str.slice(outerStart, innerStart),\r\n                        start: outerStart,\r\n                        end: innerStart,\r\n                    },\r\n                    right: {\r\n                        value: str.slice(delimStart, delimEnd),\r\n                        start: delimStart,\r\n                        end: delimEnd,\r\n                    },\r\n                });\r\n                lastOuterEnd = delimEnd;\r\n                if (!global) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Unbalanced delimiter found in string');\r\n        }\r\n        // If the delimiter matched an empty string, avoid an infinite loop\r\n        if (delimStart === delimEnd) {\r\n            delimEnd += 1;\r\n        }\r\n    }\r\n    if (global && str.length > lastOuterEnd) {\r\n        output.push({\r\n            end: str.length,\r\n            name: VALUE_NAME_OUTSIDE,\r\n            start: lastOuterEnd,\r\n            value: str.slice(lastOuterEnd),\r\n        });\r\n    }\r\n    return output;\r\n}\r\nexport function regexpTest(str, regexp, pos) {\r\n    if (pos === void 0) { pos = 0; }\r\n    regexp.lastIndex = pos;\r\n    var test = regexp.test(str);\r\n    if (regexp.global) {\r\n        regexp.lastIndex = test ? regexp.lastIndex : 0;\r\n    }\r\n    return test;\r\n}\r\nexport function regexpExec(str, regexp, pos) {\r\n    if (pos === void 0) { pos = 0; }\r\n    regexp.lastIndex = pos;\r\n    var match = regexp.exec(str);\r\n    if (regexp.global) {\r\n        regexp.lastIndex = match ? regexp.lastIndex : 0;\r\n    }\r\n    return match;\r\n}\r\nexport function cleanArray(array) {\r\n    for (var i = 0; i < array.length; i += 1) {\r\n        if (typeof array[i] === 'undefined') {\r\n            array.splice(i, 1);\r\n            i -= 1;\r\n        }\r\n    }\r\n}\r\nexport function matchInline(str, regexp) {\r\n    var global = regexp.global;\r\n    var sticky = regexp.sticky;\r\n    var output = [];\r\n    var lastEnd = 0;\r\n    var leftStart = 0;\r\n    var innerStart;\r\n    var innerEnd;\r\n    while (true) {\r\n        var match = regexpExec(str, regexp, lastEnd);\r\n        if (match === null) {\r\n            break;\r\n        }\r\n        leftStart = match.index;\r\n        if (sticky && leftStart > lastEnd) {\r\n            break;\r\n        }\r\n        cleanArray(match);\r\n        innerStart = leftStart + match[1].length;\r\n        innerEnd = lastEnd + innerStart + match[2].length;\r\n        if (leftStart > lastEnd) {\r\n            output.push({\r\n                name: VALUE_NAME_OUTSIDE,\r\n                value: str.slice(lastEnd, leftStart),\r\n                start: lastEnd,\r\n                end: leftStart,\r\n            });\r\n        }\r\n        output.push({\r\n            name: VALUE_NAME_INSIDE,\r\n            value: match[2],\r\n            start: innerStart,\r\n            end: innerEnd,\r\n            left: {\r\n                value: match[1],\r\n                start: leftStart,\r\n                end: innerStart,\r\n            },\r\n            right: {\r\n                value: match[3],\r\n                start: innerEnd,\r\n                end: innerEnd + match[3].length,\r\n            },\r\n        });\r\n        lastEnd = leftStart + match[0].length;\r\n        if (!global) {\r\n            break;\r\n        }\r\n    }\r\n    if (global && str.length > lastEnd) {\r\n        output.push({\r\n            name: VALUE_NAME_OUTSIDE,\r\n            value: str.slice(lastEnd),\r\n            start: lastEnd,\r\n            end: str.length,\r\n        });\r\n    }\r\n    return output;\r\n}\r\n","import { VALUE_NAME_INSIDE, VALUE_NAME_OUTSIDE } from './common';\r\nimport { loopAsync } from './helpers';\r\nimport { outputCallHelper } from './inline';\r\nimport { matchInline, matchRecursive } from './regexp';\r\nvar AtatCompiler = /** @class */ (function () {\r\n    function AtatCompiler() {\r\n    }\r\n    AtatCompiler.prototype.compile = function (input, ctx, callback) {\r\n        var _this = this;\r\n        try {\r\n            if (input.length === 0) {\r\n                callback(null, '');\r\n                return;\r\n            }\r\n            var blocks = matchRecursive(input, ctx.tags.open, ctx.tags.close);\r\n            loopAsync(blocks, function (block, i, array, loopCallback) {\r\n                try {\r\n                    if (block.name === VALUE_NAME_OUTSIDE) {\r\n                        if (block.value.trim() === '') {\r\n                            loopCallback(null, '');\r\n                            return;\r\n                        }\r\n                        _this.compileInline(block.value, ctx, loopCallback);\r\n                        return;\r\n                    }\r\n                    if (block.name === VALUE_NAME_INSIDE) {\r\n                        var left = block.left;\r\n                        var inside = block;\r\n                        var right = block.right;\r\n                        var compiler = ctx.compiler(left.value);\r\n                        if (!compiler) {\r\n                            _this.compileInline(left.value + inside.value + right.value, ctx, loopCallback);\r\n                            return;\r\n                        }\r\n                        compiler.call(_this, inside, ctx, loopCallback);\r\n                        return;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    loopCallback(e);\r\n                }\r\n            }, function (err, results) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                callback(null, results.join(''));\r\n            });\r\n        }\r\n        catch (e) {\r\n            callback(e);\r\n        }\r\n    };\r\n    AtatCompiler.prototype.compileInline = function (input, ctx, callback) {\r\n        var _this = this;\r\n        try {\r\n            if (input.length === 0) {\r\n                callback(null, '');\r\n                return;\r\n            }\r\n            var blocks = matchInline(input, ctx.inline);\r\n            loopAsync(blocks, function (block, i, array, loopCallback) {\r\n                try {\r\n                    if (block.name === VALUE_NAME_OUTSIDE) {\r\n                        ctx.parts.push(block.value);\r\n                        loopCallback(null, \"this.output += this.parts[\" + (ctx.parts.length - 1) + \"];\");\r\n                        return;\r\n                    }\r\n                    if (block.name === VALUE_NAME_INSIDE) {\r\n                        var left = block.left;\r\n                        var inside = block;\r\n                        var right = block.right;\r\n                        if (inside.value.trim() === '') {\r\n                            loopCallback(null, '');\r\n                            return;\r\n                        }\r\n                        var compiler = ctx.compiler(left.value + inside.value + right.value);\r\n                        if (!compiler) {\r\n                            outputCallHelper.call(_this, inside, ctx, loopCallback);\r\n                            return;\r\n                        }\r\n                        compiler.call(_this, inside, ctx, loopCallback);\r\n                        return;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    loopCallback(e);\r\n                }\r\n            }, function (err, results) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                callback(null, results.join(''));\r\n            });\r\n        }\r\n        catch (e) {\r\n            callback(e);\r\n        }\r\n    };\r\n    return AtatCompiler;\r\n}());\r\nexport { AtatCompiler };\r\n","var DefaultFileResolver = /** @class */ (function () {\r\n    function DefaultFileResolver() {\r\n        this.loadFile = function (path, callback) {\r\n            try {\r\n                var fs = require('fs');\r\n                fs.readFile(path, 'utf-8', callback);\r\n            }\r\n            catch (err) {\r\n                callback(err);\r\n            }\r\n        };\r\n    }\r\n    return DefaultFileResolver;\r\n}());\r\nexport default DefaultFileResolver;\r\n","import { DefaultFileResolver } from './fileResolvers';\r\nexport var DEFAULT_OPTIONS = {\r\n    it: 'it',\r\n    $: '$',\r\n    helpers: {},\r\n    fileResolver: new DefaultFileResolver(),\r\n};\r\n","import { atat } from './atat';\r\nimport { VALUE_NAME_OUTSIDE, } from './common';\r\nimport { loopAsync } from './helpers';\r\nimport { matchRecursive, regexpExec } from './regexp';\r\nexport var tags = {\r\n    '@\\\\{': compileCode,\r\n    '@for\\\\s*\\\\(': compileFor,\r\n    '@function\\\\s+[$A-Za-z0-9]*\\\\s*\\\\(': compileFunction,\r\n    '@if\\\\s*\\\\(': compileIf,\r\n    '@section\\\\s+[$A-Za-z0-9]*\\\\s*\\\\{': compileSection,\r\n    '@while\\\\s*\\\\(': compileWhile,\r\n};\r\nfunction compileCode(inside, ctx, callback) {\r\n    callback(null, inside.value.trim());\r\n}\r\nfunction compileFor(inside, ctx, callback) {\r\n    var code = \"for(\" + inside.value + \"}\";\r\n    var blocks = matchRecursive(code, /\\{/g, /\\}/g);\r\n    var out = '';\r\n    out += blocks[0].value;\r\n    out += '{';\r\n    this.compile(blocks[1].value, ctx, function (err, res) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        out += res;\r\n        out += '}';\r\n        callback(null, out);\r\n    });\r\n}\r\nfunction compileFunction(inside, ctx, callback) {\r\n    var left = inside.left.value.trim().substring(1);\r\n    callback(null, \"\" + left + inside.value.trim() + \"}\");\r\n}\r\nfunction compileIf(inside, ctx, callback) {\r\n    var _this = this;\r\n    var code = \"if(\" + inside.value + \"}\";\r\n    var blocks = matchRecursive(code, /\\{/g, /\\}/g);\r\n    loopAsync(blocks, function (block, i, array, loopCallback) {\r\n        if (block.name === VALUE_NAME_OUTSIDE) {\r\n            return loopCallback(null, block.value);\r\n        }\r\n        _this.compile(block.value, ctx, loopCallback);\r\n    }, function (err, results) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, results.join(''));\r\n    });\r\n}\r\nfunction compileSection(inside, ctx, callback) {\r\n    var block = inside.value.trim();\r\n    var value = inside.left.value.trim();\r\n    var regName = /^@section\\s+([A-Za-z0-9]+)\\s*\\{/g;\r\n    var match = regexpExec(value, regName);\r\n    if (!match || match.length > 2) {\r\n        return callback(new Error('Section parsing error'));\r\n    }\r\n    var name = match[1].trim();\r\n    if (ctx.sections[name]) {\r\n        return callback(new Error('Section already exists'));\r\n    }\r\n    atat.parse(block, ctx.options, function (err, template) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        template.context.parent = ctx;\r\n        ctx.sections[name] = template;\r\n        callback(null);\r\n    });\r\n}\r\nfunction compileWhile(inside, ctx, callback) {\r\n    var code = \"while(\" + inside.value + \"}\";\r\n    var blocks = matchRecursive(code, /\\{/g, /\\}/g);\r\n    var out = '';\r\n    out += blocks[0].value;\r\n    out += '{';\r\n    this.compile(blocks[1].value, ctx, function (err, res) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        out += res;\r\n        out += '}';\r\n        callback(null, out);\r\n    });\r\n}\r\n","import { getTags, getTagsInline, helpers, loop, merge } from './helpers';\r\nimport { inlineTags } from './inline';\r\nimport { DEFAULT_OPTIONS } from './options';\r\nimport { regexpTest } from './regexp';\r\nimport { tags } from './tags';\r\nvar AtatContext = /** @class */ (function () {\r\n    function AtatContext(opts) {\r\n        var _this = this;\r\n        this.options = merge(DEFAULT_OPTIONS, opts);\r\n        this.helpers = merge(helpers, opts.helpers);\r\n        this.model = null;\r\n        this.output = '';\r\n        this.parts = [];\r\n        this.parent = null;\r\n        this.arguments = [this.options.it, this.options.$, 'body'].join(',');\r\n        this.tags = getTags(tags);\r\n        this.inline = getTagsInline(inlineTags);\r\n        loop(inlineTags, function (compiler, regexp) {\r\n            _this.tags.compilers.push({\r\n                compiler: compiler,\r\n                regexp: new RegExp(regexp, 'g'),\r\n            });\r\n        });\r\n        this.layout = null;\r\n        this.partials = [];\r\n        this.sections = {};\r\n    }\r\n    AtatContext.prototype.section = function (name) {\r\n        return name\r\n            ? this.sections[name] || (this.parent && this.parent.section(name))\r\n            : null;\r\n    };\r\n    AtatContext.prototype.compiler = function (str) {\r\n        if (str === void 0) { str = ''; }\r\n        for (var i = 0, l = this.tags.compilers.length; i < l; i += 1) {\r\n            var item = this.tags.compilers[i];\r\n            if (regexpTest(str, item.regexp)) {\r\n                return item.compiler;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    return AtatContext;\r\n}());\r\nexport { AtatContext };\r\n","import { noop } from './common';\r\nimport { AtatCompiler } from './compiler';\r\nimport { AtatContext } from './context';\r\nimport { merge } from './helpers';\r\nimport { DEFAULT_OPTIONS } from './options';\r\nexport var atat = {\r\n    config: function (opts) {\r\n        var options = merge(DEFAULT_OPTIONS, opts);\r\n        for (var x in options) {\r\n            if (DEFAULT_OPTIONS.hasOwnProperty(x)) {\r\n                DEFAULT_OPTIONS[x] = options[x];\r\n            }\r\n        }\r\n    },\r\n    parse: function (input, optionsArg, callbackArg) {\r\n        if (optionsArg === void 0) { optionsArg = {}; }\r\n        if (callbackArg === void 0) { callbackArg = noop; }\r\n        var options = optionsArg;\r\n        var callback = callbackArg;\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = {};\r\n        }\r\n        if (callback === noop && typeof Promise !== 'undefined') {\r\n            return new Promise(function (resolve, reject) {\r\n                atat.parse(input, options, function (err, result) {\r\n                    err ? reject(err) : resolve(result);\r\n                });\r\n            });\r\n        }\r\n        var ctx = new AtatContext(options);\r\n        var compiler = new AtatCompiler();\r\n        compiler.compile(input, ctx, function (err, output) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            // tslint:disable-next-line: no-function-constructor-with-string-args\r\n            var render = new Function(ctx.arguments, output + \";return this.output;\");\r\n            ctx.template = function (model) {\r\n                try {\r\n                    ctx.output = '';\r\n                    ctx.model = model || ctx.model;\r\n                    var body = render.call(ctx, ctx.model, ctx.helpers, ctx.body);\r\n                    if (ctx.layout) {\r\n                        ctx.layout.context.body = body;\r\n                        body = ctx.layout(ctx.model);\r\n                    }\r\n                    return body;\r\n                }\r\n                catch (e) {\r\n                    return e.toString();\r\n                }\r\n            };\r\n            ctx.template.context = ctx;\r\n            callback(null, ctx.template);\r\n        });\r\n    },\r\n    loadAndParse: function (path, optionsArg, callbackArg) {\r\n        if (optionsArg === void 0) { optionsArg = {}; }\r\n        if (callbackArg === void 0) { callbackArg = noop; }\r\n        var options = optionsArg;\r\n        var callback = callbackArg;\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = {};\r\n        }\r\n        if (callback === noop && typeof Promise !== 'undefined') {\r\n            return new Promise(function (resolve, reject) {\r\n                atat.loadAndParse(path, options, function (err, result) {\r\n                    err ? reject(err) : resolve(result);\r\n                });\r\n            });\r\n        }\r\n        var fileResolver = options.fileResolver || DEFAULT_OPTIONS.fileResolver;\r\n        fileResolver.loadFile(path, function (err, content) {\r\n            err ? callback(err) : atat.parse(content, options, callback);\r\n        });\r\n    },\r\n    render: function (input, model, optionsArg, callbackArg) {\r\n        if (model === void 0) { model = {}; }\r\n        if (optionsArg === void 0) { optionsArg = {}; }\r\n        if (callbackArg === void 0) { callbackArg = noop; }\r\n        var options = optionsArg;\r\n        var callback = callbackArg;\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = {};\r\n        }\r\n        if (callback === noop && typeof Promise !== 'undefined') {\r\n            return new Promise(function (resolve, reject) {\r\n                atat.render(input, model, options, function (err, result) {\r\n                    err ? reject(err) : resolve(result);\r\n                });\r\n            });\r\n        }\r\n        atat.parse(input, options, function (err, render) {\r\n            err ? callback(err) : callback(null, render(model));\r\n        });\r\n    },\r\n    loadAndRender: function (path, model, optionsArg, callbackArg) {\r\n        if (optionsArg === void 0) { optionsArg = {}; }\r\n        if (callbackArg === void 0) { callbackArg = noop; }\r\n        var options = optionsArg;\r\n        var callback = callbackArg;\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = {};\r\n        }\r\n        if (callback === noop && typeof Promise !== 'undefined') {\r\n            return new Promise(function (resolve, reject) {\r\n                atat.loadAndRender(path, model, options, function (err, result) {\r\n                    err ? reject(err) : resolve(result);\r\n                });\r\n            });\r\n        }\r\n        atat.loadAndParse(path, options, function (err, render) {\r\n            err ? callback(err) : callback(null, render(model));\r\n        });\r\n    },\r\n    // tslint:disable-next-line: function-name\r\n    __express: function (path, options, callback) {\r\n        atat.loadAndParse(path, function (err, template) {\r\n            err ? callback(err.toString()) : callback(null, template(options));\r\n        });\r\n    },\r\n};\r\n"],"sourceRoot":""}