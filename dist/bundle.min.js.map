{"version":3,"sources":["webpack://atat/webpack/universalModuleDefinition","webpack://atat/webpack/bootstrap","webpack://atat/./src/common.ts","webpack://atat/./src/helpers.ts","webpack://atat/./src/regexp.ts","webpack://atat/./src/atat.ts","webpack://atat/./src/inline.ts","webpack://atat/./src/load_file.ts","webpack://atat/./src/AtatCompiler.ts","webpack://atat/./src/tags.ts","webpack://atat/./src/AtatOptions.ts","webpack://atat/./src/AtatContext.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","noop","VALUE_NAME_OUTSIDE","VALUE_NAME_INSIDE","HTML_RULES","&","<",">","\"","'","/","CLEAR_TAGS","MATCH_HTML","common_1","loop","array","fn","toString","length","x","encode_html","code","replace","trim_string","str","chars","_i","arguments","String","trim","indexOf","charAt","substring","json_stringify","obj","JSON","stringify","join_helper","separator","Array","join","uppercase_helper","toUpperCase","lowercase_helper","toLowerCase","helpers","encode","json","upper","lower","merge","src","dest","get_tags","compilers","regexps","compiler","regexp","push","open","RegExp","close","get_tags_inline","loop_async","callback","ready","finished","results","cb","index","err","res","escape_quotes","regexp_exec","pos","lastIndex","match","exec","global","clean_array","splice","match_recursive","left","right","outerStart","innerStart","leftMatch","rightMatch","sticky","output","openTokens","delimStart","delimEnd","lastOuterEnd","Error","slice","start","end","regexp_test","test","match_inline","innerEnd","lastEnd","leftStart","AtatContext_1","AtatCompiler_1","load_file_1","atat","compileByPath","path","opts","load_file","content","compile","input","ctx","AtatContext","AtatCompiler","render","Function","template","model","body","__layout","__context","e","__express","options","helpers_1","atat_1","inline_tags","(@section\\()([^]*?)(\\)@)","inside","name_1","(@layout\\()([^]*?)(\\)@)","parent","(@partial\\()([^]*?)(\\)@)","args_1","split","uri","shift","__partials","(@\\()([^]*?)(\\)@)","val","(@!\\()([^]*?)(\\)@)","output_call_helper","name_2","request","XMLHttpRequest","onreadystatechange","this","readyState","status","responseText","send","regexp_1","inline_1","_this","blocks","tags","block","compile_inline","inline","parts","@\\{","@if\\s*\\(","@while\\s*\\(","out","@for\\s*\\(","@function\\s+[$A-Za-z0-9]*\\s*\\(","@section\\s+[$A-Za-z0-9]*\\s*\\{","__sections","AtatDefaultOpions","modelname","helpersname","basePath","AtatOptions_1","tags_1","section","item"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,KAAAD,IAEAD,EAAA,KAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA2CA,OAtCAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACAkB,OAAAC,eAAAnB,EAAA,cAAiDwB,OAAA,KAIjDlB,EAAAmB,EAAA,SAAAxB,GACA,IAAAe,EAAAf,KAAAyB,WACA,WAA2B,OAAAzB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDtB,EAAAyB,EAAA,GAIAzB,IAAA0B,EAAA,kCClEAd,OAAAC,eAAAnB,EAAA,cAA8CwB,OAAA,IAE9CxB,EAAAiC,KADA,aAEAjC,EAAAkC,mBAAA,UACAlC,EAAAmC,kBAAA,SACAnC,EAAAoC,YAAsBC,IAAA,QAAYC,IAAA,QAAcC,IAAA,QAAcC,IAAA,QAAcC,IAAA,QAAcC,IAAA,SAC1F1C,EAAA2C,WAAA,2BACA3C,EAAA4C,WAAA,wDCPA1B,OAAAC,eAAAnB,EAAA,cAA8CwB,OAAA,IAC9C,IAAAqB,EAAAvC,EAAA,GA8CA,SAAAwC,EAAAC,EAAAC,GACA,sBAAA9B,OAAAW,UAAAoB,SAAAtC,KAAAoC,GAUA,QAAAvC,EAAA,EAAAC,GADAsC,KACAG,OAAqC1C,EAAAC,EAAOD,IAC5CwC,EAAAD,EAAAvC,KAAAuC,QATA,QAAAI,KADAJ,IAEAA,EAAAjB,eAAAqB,IACAH,EAAAD,EAAAI,KAAAJ,GAoCA,SAAAK,EAAAC,GAEA,YADA,IAAAA,IAA0BA,EAAA,IAC1BA,EAAAJ,WAAAK,QAAAT,EAAAD,WAAA,SAAAhC,GACA,OAAAiC,EAAAT,WAAAxB,QAIA,SAAA2C,EAAAC,GAEA,IADA,IAAAC,KACAC,EAAA,EAAoBA,EAAAC,UAAAT,OAAuBQ,IAC3CD,EAAAC,EAAA,GAAAC,UAAAD,GAEA,MAAAD,EAAAP,OACA,OAAAU,OAAA/B,UAAAgC,KAAAlD,KAAA6C,GAEA,KAAAC,EAAAK,QAAAN,EAAAO,OAAA,QACAP,IAAAQ,UAAA,GAEA,KAAAP,EAAAK,QAAAN,EAAAO,OAAAP,EAAAN,OAAA,QACAM,IAAAQ,UAAA,EAAAR,EAAAN,OAAA,GAEA,OAAAM,EAOA,SAAAS,EAAAC,GACA,OAAAC,KAAAC,UAAAF,GAGA,SAAAG,EAAAtB,EAAAuB,GAGA,YAFA,IAAAvB,IAA2BA,WAC3B,IAAAuB,IAA+BA,EAAA,IAC/BC,MAAA1C,UAAA2C,KAAA7D,KAAAoC,EAAAuB,GAGA,SAAAG,EAAAjB,GAEA,YADA,IAAAA,IAAyBA,EAAA,IACzBA,EAAAP,WAAAyB,cAGA,SAAAC,EAAAnB,GAEA,YADA,IAAAA,IAAyBA,EAAA,IACzBA,EAAAP,WAAA2B,cAnIA5E,EAAA6E,SACAC,OAAA1B,EACA2B,KAAAd,EACAO,KAAAH,EACAW,MAAAP,EACAQ,MAAAN,GAgBA3E,EAAAkF,MAdA,SAAAA,EAAAC,EAAAC,GAEA,QAAAjC,UADA,IAAAiC,IAA0BA,MAC1BD,GACAC,EAAAtD,eAAAqB,IAAAgC,EAAArD,eAAAqB,KACA,iBAAAgC,EAAAhC,GACAiC,EAAAjC,GAAA+B,EAAAC,EAAAhC,IAGAiC,EAAAjC,GAAAgC,EAAAhC,IAIA,OAAAiC,GAgBApF,EAAAqF,SAbA,SAAAC,GACA,IAAAC,KAMA,OALAzC,EAAAwC,EAAA,SAAAE,EAAAC,IACA,IAAAF,EAAAzB,QAAA2B,IACAF,EAAAG,KAAAD,MAIAE,KAAA,IAAAC,OAAAL,EAAAf,KAAA,UACAqB,MAAA,MACAP,eAYAtF,EAAA8F,gBARA,SAAAR,GACA,IAAAC,KAKA,OAJAzC,EAAAwC,EAAA,SAAAE,EAAAC,GACAF,EAAAG,KAAAD,KAEAF,EAAAG,KAAA,oCACA,IAAAE,OAAAL,EAAAf,KAAA,WAkBAxE,EAAA8C,OAyBA9C,EAAA+F,WAxBA,SAAAhD,EAAAC,EAAAgD,GAEA,IADA,IAAAC,EAAA,EAAAC,GAAA,EAAAC,KAAAjD,EAAAH,EAAAG,OACA1C,EAAA,EAAmBA,EAAA0C,EAAY1C,IAC/BwC,EAAAD,EAAAvC,KAAAuC,EAAAqD,EAAA5F,IAEA,SAAA4F,EAAAC,GACA,gBAAAC,EAAAC,GACA,IAAAL,EAAA,CAGA,GAAAI,EAGA,OAFAJ,GAAA,OACAF,EAAAM,GAGAH,EAAAE,GAAAE,IACAN,GACA/C,IACAgD,GAAA,EACAF,EAAA,KAAAG,QAYAnG,EAAAoD,cAiBApD,EAAAuD,cAIAvD,EAAAwG,cAHA,SAAAhD,GACA,OAAAD,EAAAC,GAAAF,QAAA,kBAAAA,QAAA,mBAMAtD,EAAAiE,iBAMAjE,EAAAqE,cAKArE,EAAAyE,mBAKAzE,EAAA2E,iDCvIAzD,OAAAC,eAAAnB,EAAA,cAA8CwB,OAAA,IAC9C,IAAAqB,EAAAvC,EAAA,GAuGA,SAAAmG,EAAAjD,EAAAiC,EAAAiB,QACA,IAAAA,IAAyBA,EAAA,GACzBjB,EAAAkB,UAAAD,EACA,IAAAE,EAAAnB,EAAAoB,KAAArD,GAIA,OAHAiC,EAAAqB,SACArB,EAAAkB,UAAAC,EAAAnB,EAAAkB,UAAA,GAEAC,EAGA,SAAAG,EAAAhE,GACA,QAAAvC,EAAA,EAAmBA,EAAAuC,EAAAG,OAAkB1C,SACrC,IAAAuC,EAAAvC,KACAuC,EAAAiE,OAAAxG,EAAA,GACAA,KAzBAR,EAAAiH,gBA3FA,SAAAzD,EAAA0D,EAAAC,GAEA,IADA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAT,EAAAI,EAAAJ,OAAAU,EAAAN,EAAAM,OAAAC,KAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,IACA,CAsBA,GArBAP,EAAAb,EAAAjD,EAAA0D,EAAAU,GACAL,EAAAd,EAAAjD,EAAA2D,EAAAS,GAEAN,GAAAC,IACAD,EAAAjB,OAAAkB,EAAAlB,MACAkB,EAAA,KAGAD,EAAA,MAaAA,GAAAC,EAEAK,GADAD,GAAAL,GAAAC,GAAAlB,QACAiB,GAAAC,GAAA,GAAArE,YAEA,IAAAwE,EACA,MAEA,GAAAF,IAAAE,GAAAC,EAAAE,EACA,MAEA,GAAAP,EACAI,IACAN,EAAAO,EACAN,EAAAO,KAEAF,MAEA,KAAAH,IAAAG,EAiCA,UAAAI,MAAA,wCAhCA,MAAAJ,IACAN,EAAAS,GACAJ,EAAA/B,MACA3E,KAAA8B,EAAAX,mBACAV,MAAAgC,EAAAuE,MAAAF,EAAAT,GACAY,MAAAH,EACAI,IAAAb,IAGAK,EAAA/B,MACA3E,KAAA8B,EAAAV,kBACAX,MAAAgC,EAAAuE,MAAAV,EAAAM,GACAK,MAAAX,EACAY,IAAAN,EACAT,MACA1F,MAAAgC,EAAAuE,MAAAX,EAAAC,GACAW,MAAAZ,EACAa,IAAAZ,GAEAF,OACA3F,MAAAgC,EAAAuE,MAAAJ,EAAAC,GACAI,MAAAL,EACAM,IAAAL,KAGAC,EAAAD,GACAd,GACA,MAQAa,IAAAC,KACAA,EAWA,OARAd,GAAAtD,EAAAN,OAAA2E,GACAJ,EAAA/B,MACA3E,KAAA8B,EAAAX,mBACAV,MAAAgC,EAAAuE,MAAAF,GACAG,MAAAH,EACAI,IAAAzE,EAAAN,SAGAuE,GAYAzH,EAAAkI,YATA,SAAA1E,EAAAiC,EAAAiB,QACA,IAAAA,IAAyBA,EAAA,GACzBjB,EAAAkB,UAAAD,EACA,IAAAyB,EAAA1C,EAAA0C,KAAA3E,GAIA,OAHAiC,EAAAqB,SACArB,EAAAkB,UAAAwB,EAAA1C,EAAAkB,UAAA,GAEAwB,GAYAnI,EAAAyG,cASAzG,EAAA+G,cAsDA/G,EAAAoI,aArDA,SAAA5E,EAAAiC,GAEA,IADA,IAAA4B,EAAAgB,EAAAvB,EAAArB,EAAAqB,OAAAU,EAAA/B,EAAA+B,OAAAC,KAAAa,EAAA,EAAAC,EAAA,IACA,CACA,IAAA3B,EAAAH,EAAAjD,EAAAiC,EAAA6C,GACA,SAAA1B,EACA,MAGA,GADA2B,EAAA3B,EAAAP,MACAmB,GAAAe,EAAAD,EACA,MA8BA,GA5BAvB,EAAAH,GAEAyB,EAAAC,GADAjB,EAAAkB,EAAA3B,EAAA,GAAA1D,QACA0D,EAAA,GAAA1D,OACAqF,EAAAD,GACAb,EAAA/B,MACA3E,KAAA8B,EAAAX,mBACAV,MAAAgC,EAAAuE,MAAAO,EAAAC,GACAP,MAAAM,EACAL,IAAAM,IAGAd,EAAA/B,MACA3E,KAAA8B,EAAAV,kBACAX,MAAAoF,EAAA,GACAoB,MAAAX,EACAY,IAAAI,EACAnB,MACA1F,MAAAoF,EAAA,GACAoB,MAAAO,EACAN,IAAAZ,GAEAF,OACA3F,MAAAoF,EAAA,GACAoB,MAAAK,EACAJ,IAAAI,EAAAzB,EAAA,GAAA1D,UAGAoF,EAAAC,EAAA3B,EAAA,GAAA1D,QACA4D,EACA,MAWA,OARAA,GAAAtD,EAAAN,OAAAoF,GACAb,EAAA/B,MACA3E,KAAA8B,EAAAX,mBACAV,MAAAgC,EAAAuE,MAAAO,GACAN,MAAAM,EACAL,IAAAzE,EAAAN,SAGAuE,iCC9KAvG,OAAAC,eAAAnB,EAAA,cAA8CwB,OAAA,IAC9C,IAAAgH,EAAAlI,EAAA,GACAmI,EAAAnI,EAAA,GACAuC,EAAAvC,EAAA,GACAoI,EAAApI,EAAA,GACAN,EAAA2I,MACAC,cAAA,SAAAC,EAAAC,EAAA9C,QACA,IAAA8C,IAA8BA,WAC9B,IAAA9C,IAAkCA,EAAAnD,EAAAZ,MAClC,mBAAA6G,IACA9C,EAAA8C,EACAA,MAEAJ,EAAAK,UAAAF,EAAA,SAAAvC,EAAA0C,GACA,GAAA1C,EACA,OAAAN,EAAAM,GAEAtG,EAAA2I,KAAAM,QAAAD,EAAAF,EAAA9C,MAGAiD,QAAA,SAAAC,EAAAJ,EAAA9C,QACA,IAAA8C,IAA8BA,WAC9B,IAAA9C,IAAkCA,EAAAnD,EAAAZ,MAClC,mBAAA6G,IACA9C,EAAA8C,EACAA,MAEA,IAAAK,EAAA,IAAAX,EAAAY,YAAAN,IACA,IAAAL,EAAAY,cACAJ,QAAAC,EAAAC,EAAA,SAAA7C,EAAAmB,GACA,GAAAnB,EACA,OAAAN,EAAAM,GAEA,IAAAgD,EAAA,IAAAC,SAAAJ,EAAAxF,UAAA8D,EAAA,wBACA0B,EAAAK,SAAA,SAAAC,GACA,IACAN,EAAA1B,OAAA,GACA0B,EAAAM,SAAAN,EAAAM,MACA,IAAAC,EAAAJ,EAAA3I,KAAAwI,IAAAM,MAAAN,EAAAtE,QAAAsE,EAAAO,MAKA,OAJAP,EAAAQ,WACAR,EAAAQ,SAAAC,UAAAF,OACAA,EAAAP,EAAAQ,SAAAR,EAAAM,QAEAC,EAEA,MAAAG,GACA,OAAAA,EAAA5G,aAGAkG,EAAAK,SAAAI,UAAAT,EACAnD,EAAA,KAAAmD,EAAAK,aAGAM,UAAA,SAAAjB,EAAAkB,EAAA/D,GACAhG,EAAA2I,KAAAC,cAAAC,EAAA,SAAAvC,EAAAkD,GACA,OAAAlD,EACAN,EAAAM,EAAArD,YAEA+C,EAAA,KAAAwD,EAAAO,sCC1DA7I,OAAAC,eAAAnB,EAAA,cAA8CwB,OAAA,IAC9C,IAAAwI,EAAA1J,EAAA,GACA2J,EAAA3J,EAAA,GACAN,EAAAkK,aACAC,6BAsEA,SAAAC,EAAAjB,EAAAnD,GACA,IACA,IAAAqE,EAAAL,EAAAxD,cAAA4D,EAAA5I,OACAiG,EAAA,oDAAiD4C,EAAA,kBAAuClB,EAAAxF,UAAA,sBACxFqC,EAAA,KAAAyB,GAEA,MAAAoC,GACA7D,EAAA6D,KA5EAS,4BA6BA,SAAAF,EAAAjB,EAAAnD,GACA,IACA,GAAAmD,EAAAQ,SACA,OAAA3D,IAEAiE,EAAAtB,KAAAC,cAAAoB,EAAAxD,cAAA4D,EAAA5I,OAAA2H,EAAAY,QAAA,SAAAzD,EAAAkD,GACA,GAAAlD,EACA,OAAAN,EAAAM,GAEA6C,EAAAQ,SAAAH,EACAA,EAAAI,UAAAW,OAAApB,EACAnD,MAGA,MAAA6D,GACA7D,EAAA6D,KA3CAW,6BA8CA,SAAAJ,EAAAjB,EAAAnD,GACA,IACA,IAAAxE,EAAA4I,EAAA5I,MAAAqC,OACA,OAAArC,EACA,OAAAwE,EAAA,IAAA8B,MAAA,0BAEA,IAAA2C,EAAAjJ,EAAAkJ,MAAA,YACAC,EAAAX,EAAAxD,cAAAiE,EAAAG,SACAX,EAAAtB,KAAAC,cAAA+B,EAAAxB,EAAAY,QAAA,SAAAzD,EAAAkD,GACA,GAAAlD,EACA,OAAAN,EAAAM,GAEA6C,EAAA0B,WAAAnF,KAAA8D,GACAA,EAAAI,UAAAW,OAAApB,EACA,IAAA1B,EAAA,mCAAA0B,EAAA0B,WAAA3H,OAAA,QAAAuH,EAAA,KACAzE,EAAA,KAAAyB,KAGA,MAAAoC,GACA7D,EAAA6D,KAhEAiB,sBAGA,SAAAV,EAAAjB,EAAAnD,GACA,IACA,IAAA+E,EAAAX,EAAA5I,MAAAqC,OACA,KAAAkH,GACA/E,IAEAA,EAAA,2CAAAoE,EAAA5I,MAAAqC,OAAA,MAEA,MAAAgG,GACA7D,EAAA6D,KAXAmB,uBAcA,SAAAZ,EAAAjB,EAAAnD,GACA,IACA,IAAA+E,EAAAX,EAAA5I,MAAAqC,OACA,KAAAkH,GACA/E,IAEAA,EAAA,wBAAAoE,EAAA5I,MAAAqC,OAAA,MAEA,MAAAgG,GACA7D,EAAA6D,MAiEA7J,EAAAiL,mBAZA,SAAAb,EAAAjB,EAAAnD,GACA,IACA,IAAAkF,EAAAd,EAAAlD,KAAA1F,MAAAwC,UAAA,EAAAoG,EAAAlD,KAAA1F,MAAA0B,OAAA,GACA,sBAAAiG,EAAAtE,QAAAqG,GACA,gBAAAA,EAAA,uBAEAlF,EAAA,oCAAAkF,EAAA,IAAAd,EAAA5I,MAAAqC,OAAA,MAEA,MAAAgG,GACA7D,EAAA6D,mCC7FA3I,OAAAC,eAAAnB,EAAA,cAA8CwB,OAAA,IAiB9CxB,EAAA+I,UAhBA,SAAAF,EAAA7C,GACA,IAAAmF,EAAA,IAAAC,eACAD,EAAAxF,KAAA,MAAAkD,GAAA,GACAsC,EAAAE,mBAAA,WACA,IAAAC,KAAAC,aACAD,KAAAE,QAAA,KAAAF,KAAAE,OAAA,IACAxF,EAAA,KAAAsF,KAAAG,cAGAzF,EAAA,IAAA8B,MAAA,8BAAAe,EAAA,QAIAsC,EAAAO,OACAP,EAAA,oCCfAjK,OAAAC,eAAAnB,EAAA,cAA8CwB,OAAA,IAC9C,IAAAqB,EAAAvC,EAAA,GACA0J,EAAA1J,EAAA,GACAqL,EAAArL,EAAA,GACAsL,EAAAtL,EAAA,GACA+I,EAAA,WACA,SAAAA,KAiFA,OA/EAA,EAAAxH,UAAAoH,QAAA,SAAAC,EAAAC,EAAAnD,GACA,IAAA6F,EAAAP,KACA,IACA,IAAAQ,EAAAH,EAAA1E,gBAAAiC,EAAAC,EAAA4C,KAAApG,KAAAwD,EAAA4C,KAAAlG,OACAmE,EAAAjE,WAAA+F,EAAA,SAAAE,EAAAxL,EAAAuC,EAAAiD,GACA,IACA,GAAAgG,EAAAjL,MAAA8B,EAAAX,mBACA,UAAA8J,EAAAxK,MAAAqC,YACAmC,EAAA,cAGA6F,EAAAI,eAAAD,EAAAxK,MAAA2H,EAAAnD,GAGA,GAAAgG,EAAAjL,MAAA8B,EAAAV,kBAAA,CACA,IAAA+E,EAAA8E,EAAA9E,KAAAkD,EAAA4B,EAAA7E,EAAA6E,EAAA7E,MACA3B,EAAA2D,EAAA3D,SAAA0B,EAAA1F,OACA,OAAAgE,OAIAA,EAAA7E,KAAAkL,EAAAzB,EAAAjB,EAAAnD,QAHA6F,EAAAI,eAAA/E,EAAA1F,MAAA4I,EAAA5I,MAAA2F,EAAA3F,MAAA2H,EAAAnD,IAOA,MAAA6D,GACA7D,EAAA6D,KAEa,SAAAvD,EAAAH,GACb,GAAAG,EACA,OAAAN,EAAAM,GAEAN,EAAA,KAAAG,EAAA3B,KAAA,OAGA,MAAAqF,GACA7D,EAAA6D,KAGAR,EAAAxH,UAAAoK,eAAA,SAAA/C,EAAAC,EAAAnD,GACA,IAAA6F,EAAAP,KACA,IACA,IAAAQ,EAAAH,EAAAvD,aAAAc,EAAAC,EAAA+C,QACAlC,EAAAjE,WAAA+F,EAAA,SAAAE,EAAAxL,EAAAuC,EAAAiD,GACA,IACA,GAAAgG,EAAAjL,MAAA8B,EAAAX,mBAGA,OAFAiH,EAAAgD,MAAAzG,KAAAsG,EAAAxK,YACAwE,EAAA,mCAAAmD,EAAAgD,MAAAjJ,OAAA,SAGA,GAAA8I,EAAAjL,MAAA8B,EAAAV,kBAAA,CACA,IAAA+E,EAAA8E,EAAA9E,KAAAkD,EAAA4B,EAAA7E,EAAA6E,EAAA7E,MACA,OAAAiD,EAAA5I,MAAAqC,OAEA,YADAmC,EAAA,SAGA,IAAAR,EAAA2D,EAAA3D,SAAA0B,EAAA1F,MAAA4I,EAAA5I,MAAA2F,EAAA3F,OACA,OAAAgE,OAIAA,EAAA7E,KAAAkL,EAAAzB,EAAAjB,EAAAnD,QAHA4F,EAAAX,mBAAAtK,KAAAkL,EAAAzB,EAAAjB,EAAAnD,IAOA,MAAA6D,GACA7D,EAAA6D,KAEa,SAAAvD,EAAAH,GACb,GAAAG,EACA,OAAAN,EAAAM,GAEAN,EAAA,KAAAG,EAAA3B,KAAA,OAGA,MAAAqF,GACA7D,EAAA6D,KAGAR,EAlFA,GAoFArJ,EAAAqJ,6CCzFAnI,OAAAC,eAAAnB,EAAA,cAA8CwB,OAAA,IAC9C,IAAAqB,EAAAvC,EAAA,GACAqL,EAAArL,EAAA,GACA0J,EAAA1J,EAAA,GACA2J,EAAA3J,EAAA,GACAN,EAAA+L,MACAK,OAOA,SAAAhC,EAAAjB,EAAAnD,GACAA,EAAA,KAAAoE,EAAA5I,MAAAqC,SAPAwI,aA4BA,SAAAjC,EAAAjB,EAAAnD,GACA,IAAA6F,EAAAP,KACAjI,EAAA,MAAA+G,EAAA5I,MAAA,IACAsK,EAAAH,EAAA1E,gBAAA5D,EAAA,MAAmD,OACnD2G,EAAAjE,WAAA+F,EAAA,SAAAE,EAAAxL,EAAAuC,EAAAiD,GACA,GAAAgG,EAAAjL,MAAA8B,EAAAX,mBACA,OAAA8D,EAAA,KAAAgG,EAAAxK,OAEAqK,EAAA5C,QAAA+C,EAAAxK,MAAA2H,EAAAnD,IACK,SAAAM,EAAAH,GACL,GAAAG,EACA,OAAAN,EAAAM,GAEAN,EAAA,KAAAG,EAAA3B,KAAA,QAxCA8H,gBAgEA,SAAAlC,EAAAjB,EAAAnD,GACA,IAAA3C,EAAA,SAAA+G,EAAA5I,MAAA,IACAsK,EAAAH,EAAA1E,gBAAA5D,EAAA,MAAmD,OACnDkJ,EAAA,GACAA,GAAAT,EAAA,GAAAtK,MACA+K,GAAA,IACAjB,KAAArC,QAAA6C,EAAA,GAAAtK,MAAA2H,EAAA,SAAA7C,EAAAC,GACA,GAAAD,EACA,OAAAN,EAAAM,GAEAiG,GAAAhG,EAEAP,EAAA,KADAuG,GAAA,QA1EAC,cAOA,SAAApC,EAAAjB,EAAAnD,GACA,IAAA3C,EAAA,OAAA+G,EAAA5I,MAAA,IACAsK,EAAAH,EAAA1E,gBAAA5D,EAAA,MAAmD,OACnDkJ,EAAA,GACAA,GAAAT,EAAA,GAAAtK,MACA+K,GAAA,IACAjB,KAAArC,QAAA6C,EAAA,GAAAtK,MAAA2H,EAAA,SAAA7C,EAAAC,GACA,GAAAD,EACA,OAAAN,EAAAM,GAEAiG,GAAAhG,EAEAP,EAAA,KADAuG,GAAA,QAjBAE,oCAqBA,SAAArC,EAAAjB,EAAAnD,GACA,IAAAkB,EAAAkD,EAAAlD,KAAA1F,MAAAqC,OAAAG,UAAA,GACAgC,EAAA,KAAAkB,EAAAkD,EAAA5I,MAAAqC,OAAA,MAtBA6I,mCAwCA,SAAAtC,EAAAjB,EAAAnD,GACA,IAAAgG,EAAA5B,EAAA5I,MAAAqC,OACArC,EAAA4I,EAAAlD,KAAA1F,MAAAqC,OAEA+C,EAAA+E,EAAAlF,YAAAjF,EADA,oCAEA,IAAAoF,KAAA1D,OAAA,EACA,OAAA8C,EAAA,IAAA8B,MAAA,0BAEA,IAAA/G,EAAA6F,EAAA,GAAA/C,OACA,GAAAsF,EAAAwD,WAAA5L,GACA,OAAAiF,EAAA,IAAA8B,MAAA,2BAEAmC,EAAAtB,KAAAM,QAAA+C,EAAA7C,EAAAY,QAAA,SAAAzD,EAAAkD,GACA,GAAAlD,EACA,OAAAN,EAAAM,GAEAkD,EAAAI,UAAAW,OAAApB,EACAA,EAAAwD,WAAA5L,GAAAyI,EACAxD,EAAA,wCCrEA9E,OAAAC,eAAAnB,EAAA,cAA8CwB,OAAA,IAC9CxB,EAAA4M,mBACAC,UAAA,KACAC,YAAA,IACAC,SAAA,GACAlI,0CCLA3D,OAAAC,eAAAnB,EAAA,cAA8CwB,OAAA,IAC9C,IAAAwL,EAAA1M,EAAA,GACA0J,EAAA1J,EAAA,GACAqL,EAAArL,EAAA,GACAsL,EAAAtL,EAAA,GACA2M,EAAA3M,EAAA,GACA8I,EAAA,WACA,SAAAA,EAAAN,GACA,IAAA+C,EAAAP,KACAA,KAAAvB,QAAAC,EAAA9E,MAAA8H,EAAAJ,kBAAA9D,GACAwC,KAAA7D,OAAA,GACA6D,KAAA7B,MAAA,KACA6B,KAAAzG,QAAAmF,EAAA9E,MAAA8E,EAAAnF,QAAAiE,EAAAjE,SACAyG,KAAAa,SACAb,KAAA3H,WACA2H,KAAAvB,QAAA8C,UACAvB,KAAAvB,QAAA+C,YACA,QACAtI,KAAA,KACA8G,KAAAS,KAAA/B,EAAA3E,SAAA4H,EAAAlB,MACAT,KAAAY,OAAAlC,EAAAlE,gBAAA8F,EAAA1B,aACAF,EAAAlH,KAAAmK,EAAAlB,KAAA,SAAAvG,EAAAC,GACAoG,EAAAE,KAAAzG,UAAAI,MACAF,WACAC,OAAA,IAAAG,OAAAH,EAAA,SAGAuE,EAAAlH,KAAA8I,EAAA1B,YAAA,SAAA1E,EAAAC,GACAoG,EAAAE,KAAAzG,UAAAI,MACAF,WACAC,OAAA,IAAAG,OAAAH,EAAA,SAGA6F,KAAA3B,SAAA,KACA2B,KAAAT,cACAS,KAAAqB,cACArB,KAAAf,OAAA,KAkBA,OAhBAnB,EAAAvH,UAAAqL,QAAA,SAAAnM,GACA,OAAAA,EAGAuK,KAAAqB,WAAA5L,IAAAuK,KAAAf,QAAAe,KAAAf,OAAA2C,QAAAnM,GAFA,MAIAqI,EAAAvH,UAAA2D,SAAA,SAAAhC,QACA,IAAAA,IAA6BA,EAAA,IAC7B,QAAAhD,EAAA,EAAAC,EAAA6K,KAAAS,KAAAzG,UAAApC,OAAuD1C,EAAAC,EAAOD,IAAA,CAC9D,IAAA2M,EAAA7B,KAAAS,KAAAzG,UAAA9E,GACA,GAAAmL,EAAAzD,YAAA1E,EAAA2J,EAAA1H,QACA,OAAA0H,EAAA3H,SAGA,aAEA4D,EAhDA,GAkDApJ,EAAAoJ","file":"bundle.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"atat\"] = factory();\n\telse\n\t\troot[\"atat\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction noop() { }\r\nexports.noop = noop;\r\nexports.VALUE_NAME_OUTSIDE = 'outside';\r\nexports.VALUE_NAME_INSIDE = 'inside';\r\nexports.HTML_RULES = { '&': '&#38;', '<': '&#60;', '>': '&#62;', '\"': '&#34;', \"'\": '&#39;', '/': '&#47;' };\r\nexports.CLEAR_TAGS = /[-[\\](){}*+?.,\\\\^$|#\\s]/g;\r\nexports.MATCH_HTML = /&(?!#?\\w+;)|<|>|\"|'|\\//g;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar common_1 = require(\"./common\");\r\nexports.helpers = {\r\n    encode: encode_html,\r\n    json: json_stringify,\r\n    join: join_helper,\r\n    upper: uppercase_helper,\r\n    lower: lowercase_helper\r\n};\r\nfunction merge(src, dest) {\r\n    if (dest === void 0) { dest = {}; }\r\n    for (var x in src) {\r\n        if (!dest.hasOwnProperty(x) && src.hasOwnProperty(x)) {\r\n            if (typeof src[x] == 'object') {\r\n                dest[x] = merge(src[x]);\r\n            }\r\n            else {\r\n                dest[x] = src[x];\r\n            }\r\n        }\r\n    }\r\n    return dest;\r\n}\r\nexports.merge = merge;\r\nfunction get_tags(compilers) {\r\n    var regexps = [];\r\n    loop(compilers, function (compiler, regexp) {\r\n        if (regexps.indexOf(regexp) === -1) {\r\n            regexps.push(regexp);\r\n        }\r\n    });\r\n    return {\r\n        open: new RegExp(regexps.join('|'), 'g'),\r\n        close: /}@/g,\r\n        compilers: []\r\n    };\r\n}\r\nexports.get_tags = get_tags;\r\nfunction get_tags_inline(compilers) {\r\n    var regexps = [];\r\n    loop(compilers, function (compiler, regexp) {\r\n        regexps.push(regexp);\r\n    });\r\n    regexps.push('(@[A-Za-z0-9$]+\\\\()([^]*?)(\\\\)@)');\r\n    return new RegExp(regexps.join('|'), 'g');\r\n}\r\nexports.get_tags_inline = get_tags_inline;\r\nfunction loop(array, fn) {\r\n    if (Object.prototype.toString.call(array) !== '[object Array]') {\r\n        array = array;\r\n        for (var x in array) {\r\n            if (array.hasOwnProperty(x)) {\r\n                fn(array[x], x, array);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    array = array;\r\n    for (var i = 0, l = array.length; i < l; i++) {\r\n        fn(array[i], i, array);\r\n    }\r\n}\r\nexports.loop = loop;\r\nfunction loop_async(array, fn, callback) {\r\n    var ready = 0, finished = false, results = [], length = array.length;\r\n    for (var i = 0; i < length; i++) {\r\n        fn(array[i], i, array, cb(i));\r\n    }\r\n    function cb(index) {\r\n        return function (err, res) {\r\n            if (finished) {\r\n                return;\r\n            }\r\n            if (err) {\r\n                finished = true;\r\n                callback(err);\r\n                return;\r\n            }\r\n            results[index] = res;\r\n            ready++;\r\n            if (ready == length) {\r\n                finished = true;\r\n                callback(null, results);\r\n            }\r\n        };\r\n    }\r\n}\r\nexports.loop_async = loop_async;\r\nfunction encode_html(code) {\r\n    if (code === void 0) { code = ''; }\r\n    return code.toString().replace(common_1.MATCH_HTML, function (m) {\r\n        return common_1.HTML_RULES[m] || m;\r\n    });\r\n}\r\nexports.encode_html = encode_html;\r\nfunction trim_string(str) {\r\n    var chars = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        chars[_i - 1] = arguments[_i];\r\n    }\r\n    if (chars.length == 0) {\r\n        return String.prototype.trim.call(str);\r\n    }\r\n    while (chars.indexOf(str.charAt(0)) >= 0) {\r\n        str = str.substring(1);\r\n    }\r\n    while (chars.indexOf(str.charAt(str.length - 1)) >= 0) {\r\n        str = str.substring(0, str.length - 1);\r\n    }\r\n    return str;\r\n}\r\nexports.trim_string = trim_string;\r\nfunction escape_quotes(str) {\r\n    return trim_string(str).replace(/^\"(.*)\"$/g, '$1').replace(/^'(.*)'$/g, '$1');\r\n}\r\nexports.escape_quotes = escape_quotes;\r\nfunction json_stringify(obj) {\r\n    return JSON.stringify(obj);\r\n}\r\nexports.json_stringify = json_stringify;\r\nfunction join_helper(array, separator) {\r\n    if (array === void 0) { array = []; }\r\n    if (separator === void 0) { separator = ''; }\r\n    return Array.prototype.join.call(array, separator);\r\n}\r\nexports.join_helper = join_helper;\r\nfunction uppercase_helper(str) {\r\n    if (str === void 0) { str = ''; }\r\n    return str.toString().toUpperCase();\r\n}\r\nexports.uppercase_helper = uppercase_helper;\r\nfunction lowercase_helper(str) {\r\n    if (str === void 0) { str = ''; }\r\n    return str.toString().toLowerCase();\r\n}\r\nexports.lowercase_helper = lowercase_helper;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar common_1 = require(\"./common\");\r\nfunction match_recursive(str, left, right) {\r\n    var global = left.global, sticky = left.sticky, output = [], openTokens = 0, delimStart = 0, delimEnd = 0, lastOuterEnd = 0, outerStart, innerStart, leftMatch, rightMatch;\r\n    while (true) {\r\n        leftMatch = regexp_exec(str, left, delimEnd);\r\n        rightMatch = regexp_exec(str, right, delimEnd);\r\n        // Keep the leftmost match only\r\n        if (leftMatch && rightMatch) {\r\n            if (leftMatch.index <= rightMatch.index) {\r\n                rightMatch = null;\r\n            }\r\n            else {\r\n                leftMatch = null;\r\n            }\r\n        }\r\n        // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):\r\n        // LM | RM | OT | Result\r\n        // 1  | 0  | 1  | loop\r\n        // 1  | 0  | 0  | loop\r\n        // 0  | 1  | 1  | loop\r\n        // 0  | 1  | 0  | throw\r\n        // 0  | 0  | 1  | throw\r\n        // 0  | 0  | 0  | break\r\n        // The paths above don't include the sticky mode special case. The loop ends after the\r\n        // first completed match if not `global`.\r\n        if (leftMatch || rightMatch) {\r\n            delimStart = (leftMatch || rightMatch).index;\r\n            delimEnd = delimStart + (leftMatch || rightMatch)[0].length;\r\n        }\r\n        else if (!openTokens) {\r\n            break;\r\n        }\r\n        if (sticky && !openTokens && delimStart > lastOuterEnd) {\r\n            break;\r\n        }\r\n        if (leftMatch) {\r\n            if (!openTokens) {\r\n                outerStart = delimStart;\r\n                innerStart = delimEnd;\r\n            }\r\n            ++openTokens;\r\n        }\r\n        else if (rightMatch && openTokens) {\r\n            if (!--openTokens) {\r\n                if (outerStart > lastOuterEnd) {\r\n                    output.push({\r\n                        name: common_1.VALUE_NAME_OUTSIDE,\r\n                        value: str.slice(lastOuterEnd, outerStart),\r\n                        start: lastOuterEnd,\r\n                        end: outerStart\r\n                    });\r\n                }\r\n                output.push({\r\n                    name: common_1.VALUE_NAME_INSIDE,\r\n                    value: str.slice(innerStart, delimStart),\r\n                    start: innerStart,\r\n                    end: delimStart,\r\n                    left: {\r\n                        value: str.slice(outerStart, innerStart),\r\n                        start: outerStart,\r\n                        end: innerStart\r\n                    },\r\n                    right: {\r\n                        value: str.slice(delimStart, delimEnd),\r\n                        start: delimStart,\r\n                        end: delimEnd\r\n                    }\r\n                });\r\n                lastOuterEnd = delimEnd;\r\n                if (!global) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Unbalanced delimiter found in string');\r\n        }\r\n        // If the delimiter matched an empty string, avoid an infinite loop\r\n        if (delimStart === delimEnd) {\r\n            ++delimEnd;\r\n        }\r\n    }\r\n    if (global && str.length > lastOuterEnd) {\r\n        output.push({\r\n            name: common_1.VALUE_NAME_OUTSIDE,\r\n            value: str.slice(lastOuterEnd),\r\n            start: lastOuterEnd,\r\n            end: str.length\r\n        });\r\n    }\r\n    return output;\r\n}\r\nexports.match_recursive = match_recursive;\r\nfunction regexp_test(str, regexp, pos) {\r\n    if (pos === void 0) { pos = 0; }\r\n    regexp.lastIndex = pos;\r\n    var test = regexp.test(str);\r\n    if (regexp.global) {\r\n        regexp.lastIndex = test ? regexp.lastIndex : 0;\r\n    }\r\n    return test;\r\n}\r\nexports.regexp_test = regexp_test;\r\nfunction regexp_exec(str, regexp, pos) {\r\n    if (pos === void 0) { pos = 0; }\r\n    regexp.lastIndex = pos;\r\n    var match = regexp.exec(str);\r\n    if (regexp.global) {\r\n        regexp.lastIndex = match ? regexp.lastIndex : 0;\r\n    }\r\n    return match;\r\n}\r\nexports.regexp_exec = regexp_exec;\r\nfunction clean_array(array) {\r\n    for (var i = 0; i < array.length; i++) {\r\n        if (typeof array[i] === 'undefined') {\r\n            array.splice(i, 1);\r\n            i--;\r\n        }\r\n    }\r\n}\r\nexports.clean_array = clean_array;\r\nfunction match_inline(str, regexp) {\r\n    var global = regexp.global, sticky = regexp.sticky, output = [], lastEnd = 0, leftStart = 0, innerStart, innerEnd;\r\n    while (true) {\r\n        var match = regexp_exec(str, regexp, lastEnd);\r\n        if (match == null) {\r\n            break;\r\n        }\r\n        leftStart = match.index;\r\n        if (sticky && leftStart > lastEnd) {\r\n            break;\r\n        }\r\n        clean_array(match);\r\n        innerStart = leftStart + match[1].length;\r\n        innerEnd = lastEnd + innerStart + match[2].length;\r\n        if (leftStart > lastEnd) {\r\n            output.push({\r\n                name: common_1.VALUE_NAME_OUTSIDE,\r\n                value: str.slice(lastEnd, leftStart),\r\n                start: lastEnd,\r\n                end: leftStart\r\n            });\r\n        }\r\n        output.push({\r\n            name: common_1.VALUE_NAME_INSIDE,\r\n            value: match[2],\r\n            start: innerStart,\r\n            end: innerEnd,\r\n            left: {\r\n                value: match[1],\r\n                start: leftStart,\r\n                end: innerStart\r\n            },\r\n            right: {\r\n                value: match[3],\r\n                start: innerEnd,\r\n                end: innerEnd + match[3].length\r\n            }\r\n        });\r\n        lastEnd = leftStart + match[0].length;\r\n        if (!global) {\r\n            break;\r\n        }\r\n    }\r\n    if (global && str.length > lastEnd) {\r\n        output.push({\r\n            name: common_1.VALUE_NAME_OUTSIDE,\r\n            value: str.slice(lastEnd),\r\n            start: lastEnd,\r\n            end: str.length\r\n        });\r\n    }\r\n    return output;\r\n}\r\nexports.match_inline = match_inline;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AtatContext_1 = require(\"./AtatContext\");\r\nvar AtatCompiler_1 = require(\"./AtatCompiler\");\r\nvar common_1 = require(\"./common\");\r\nvar load_file_1 = require(\"./load_file\");\r\nexports.atat = {\r\n    compileByPath: function (path, opts, callback) {\r\n        if (opts === void 0) { opts = {}; }\r\n        if (callback === void 0) { callback = common_1.noop; }\r\n        if (typeof opts === 'function') {\r\n            callback = opts;\r\n            opts = {};\r\n        }\r\n        load_file_1.load_file(path, function (err, content) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            exports.atat.compile(content, opts, callback);\r\n        });\r\n    },\r\n    compile: function (input, opts, callback) {\r\n        if (opts === void 0) { opts = {}; }\r\n        if (callback === void 0) { callback = common_1.noop; }\r\n        if (typeof opts === 'function') {\r\n            callback = opts;\r\n            opts = {};\r\n        }\r\n        var ctx = new AtatContext_1.AtatContext(opts);\r\n        var compiler = new AtatCompiler_1.AtatCompiler();\r\n        compiler.compile(input, ctx, function (err, output) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            var render = new Function(ctx.arguments, output + ';return this.output;');\r\n            ctx.template = function (model) {\r\n                try {\r\n                    ctx.output = '';\r\n                    ctx.model = model || ctx.model;\r\n                    var body = render.call(ctx, ctx.model, ctx.helpers, ctx.body);\r\n                    if (ctx.__layout) {\r\n                        ctx.__layout.__context.body = body;\r\n                        body = ctx.__layout(ctx.model);\r\n                    }\r\n                    return body;\r\n                }\r\n                catch (e) {\r\n                    return e.toString();\r\n                }\r\n            };\r\n            ctx.template.__context = ctx;\r\n            callback(null, ctx.template);\r\n        });\r\n    },\r\n    __express: function (path, options, callback) {\r\n        exports.atat.compileByPath(path, function (err, template) {\r\n            if (err) {\r\n                return callback(err.toString());\r\n            }\r\n            return callback(null, template(options));\r\n        });\r\n    }\r\n};\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar helpers_1 = require(\"./helpers\");\r\nvar atat_1 = require(\"./atat\");\r\nexports.inline_tags = {\r\n    '(@section\\\\()([^]*?)(\\\\)@)': output_section,\r\n    '(@layout\\\\()([^]*?)(\\\\)@)': compile_layout,\r\n    '(@partial\\\\()([^]*?)(\\\\)@)': compile_partial,\r\n    '(@\\\\()([^]*?)(\\\\)@)': output_as_text,\r\n    '(@!\\\\()([^]*?)(\\\\)@)': output_as_html\r\n};\r\nfunction output_as_text(inside, ctx, callback) {\r\n    try {\r\n        var val = inside.value.trim();\r\n        if (val === '') {\r\n            callback();\r\n        }\r\n        callback(null, \"this.output += this.helpers.encode(\" + inside.value.trim() + \");\");\r\n    }\r\n    catch (e) {\r\n        callback(e);\r\n    }\r\n}\r\nfunction output_as_html(inside, ctx, callback) {\r\n    try {\r\n        var val = inside.value.trim();\r\n        if (val === '') {\r\n            callback();\r\n        }\r\n        callback(null, \"this.output += (\" + inside.value.trim() + \");\");\r\n    }\r\n    catch (e) {\r\n        callback(e);\r\n    }\r\n}\r\nfunction compile_layout(inside, ctx, callback) {\r\n    try {\r\n        if (ctx.__layout) {\r\n            return callback();\r\n        }\r\n        atat_1.atat.compileByPath(helpers_1.escape_quotes(inside.value), ctx.options, function (err, template) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            ctx.__layout = template;\r\n            template.__context.parent = ctx;\r\n            callback();\r\n        });\r\n    }\r\n    catch (e) {\r\n        callback(e);\r\n    }\r\n}\r\nfunction compile_partial(inside, ctx, callback) {\r\n    try {\r\n        var value = inside.value.trim();\r\n        if (value == '') {\r\n            return callback(new Error('Partial parsing error'));\r\n        }\r\n        var args_1 = value.split(/\\s*,\\s*/g);\r\n        var uri = helpers_1.escape_quotes(args_1.shift());\r\n        atat_1.atat.compileByPath(uri, ctx.options, function (err, template) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            ctx.__partials.push(template);\r\n            template.__context.parent = ctx;\r\n            var output = \"this.output += this.__partials[\" + (ctx.__partials.length - 1) + \"](\" + args_1 + \");\";\r\n            callback(null, output);\r\n        });\r\n    }\r\n    catch (e) {\r\n        callback(e);\r\n    }\r\n}\r\nfunction output_section(inside, ctx, callback) {\r\n    try {\r\n        var name_1 = helpers_1.escape_quotes(inside.value);\r\n        var output = \"this.output += (function(){var s = this.section('\" + name_1 + \"'); return s?s(\" + ctx.arguments + \"):\\\"\\\";}).call(this);\";\r\n        callback(null, output);\r\n    }\r\n    catch (e) {\r\n        callback(e);\r\n    }\r\n}\r\nfunction output_call_helper(inside, ctx, callback) {\r\n    try {\r\n        var name_2 = inside.left.value.substring(1, inside.left.value.length - 1);\r\n        if (typeof ctx.helpers[name_2] !== 'function') {\r\n            throw \"Helper \\\"\" + name_2 + \"\\\" didn't declarated\";\r\n        }\r\n        callback(null, \"this.output += this.helpers.\" + name_2 + \"(\" + inside.value.trim() + \");\");\r\n    }\r\n    catch (e) {\r\n        callback(e);\r\n    }\r\n}\r\nexports.output_call_helper = output_call_helper;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction load_file(path, callback) {\r\n    var request = new XMLHttpRequest();\r\n    request.open('GET', path, true);\r\n    request.onreadystatechange = function () {\r\n        if (this.readyState === 4) {\r\n            if (this.status >= 200 && this.status < 400) {\r\n                callback(null, this.responseText);\r\n            }\r\n            else {\r\n                callback(new Error('Not able to load template \"' + path + '\"'));\r\n            }\r\n        }\r\n    };\r\n    request.send();\r\n    request = null;\r\n}\r\nexports.load_file = load_file;\r\n;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar common_1 = require(\"./common\");\r\nvar helpers_1 = require(\"./helpers\");\r\nvar regexp_1 = require(\"./regexp\");\r\nvar inline_1 = require(\"./inline\");\r\nvar AtatCompiler = /** @class */ (function () {\r\n    function AtatCompiler() {\r\n    }\r\n    AtatCompiler.prototype.compile = function (input, ctx, callback) {\r\n        var _this = this;\r\n        try {\r\n            var blocks = regexp_1.match_recursive(input, ctx.tags.open, ctx.tags.close);\r\n            helpers_1.loop_async(blocks, function (block, i, array, callback) {\r\n                try {\r\n                    if (block.name == common_1.VALUE_NAME_OUTSIDE) {\r\n                        if (block.value.trim() == '') {\r\n                            callback(null, '');\r\n                            return;\r\n                        }\r\n                        _this.compile_inline(block.value, ctx, callback);\r\n                        return;\r\n                    }\r\n                    if (block.name == common_1.VALUE_NAME_INSIDE) {\r\n                        var left = block.left, inside = block, right = block.right;\r\n                        var compiler = ctx.compiler(left.value);\r\n                        if (!compiler) {\r\n                            _this.compile_inline(left.value + inside.value + right.value, ctx, callback);\r\n                            return;\r\n                        }\r\n                        compiler.call(_this, inside, ctx, callback);\r\n                        return;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    callback(e);\r\n                }\r\n            }, function (err, results) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                callback(null, results.join(''));\r\n            });\r\n        }\r\n        catch (e) {\r\n            callback(e);\r\n        }\r\n    };\r\n    AtatCompiler.prototype.compile_inline = function (input, ctx, callback) {\r\n        var _this = this;\r\n        try {\r\n            var blocks = regexp_1.match_inline(input, ctx.inline);\r\n            helpers_1.loop_async(blocks, function (block, i, array, callback) {\r\n                try {\r\n                    if (block.name == common_1.VALUE_NAME_OUTSIDE) {\r\n                        ctx.parts.push(block.value);\r\n                        callback(null, 'this.output += this.parts[' + (ctx.parts.length - 1) + '];');\r\n                        return;\r\n                    }\r\n                    if (block.name == common_1.VALUE_NAME_INSIDE) {\r\n                        var left = block.left, inside = block, right = block.right;\r\n                        if (inside.value.trim() == '') {\r\n                            callback(null, '');\r\n                            return;\r\n                        }\r\n                        var compiler = ctx.compiler(left.value + inside.value + right.value);\r\n                        if (!compiler) {\r\n                            inline_1.output_call_helper.call(_this, inside, ctx, callback);\r\n                            return;\r\n                        }\r\n                        compiler.call(_this, inside, ctx, callback);\r\n                        return;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    callback(e);\r\n                }\r\n            }, function (err, results) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                callback(null, results.join(''));\r\n            });\r\n        }\r\n        catch (e) {\r\n            callback(e);\r\n        }\r\n    };\r\n    return AtatCompiler;\r\n}());\r\nexports.AtatCompiler = AtatCompiler;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar common_1 = require(\"./common\");\r\nvar regexp_1 = require(\"./regexp\");\r\nvar helpers_1 = require(\"./helpers\");\r\nvar atat_1 = require(\"./atat\");\r\nexports.tags = {\r\n    '@\\\\{': compile_code,\r\n    '@if\\\\s*\\\\(': compile_if,\r\n    '@while\\\\s*\\\\(': compile_while,\r\n    '@for\\\\s*\\\\(': compile_for,\r\n    '@function\\\\s+[$A-Za-z0-9]*\\\\s*\\\\(': compile_function,\r\n    '@section\\\\s+[$A-Za-z0-9]*\\\\s*\\\\{': compile_section\r\n};\r\nfunction compile_code(inside, ctx, callback) {\r\n    callback(null, inside.value.trim());\r\n}\r\nfunction compile_for(inside, ctx, callback) {\r\n    var code = 'for(' + inside.value + '}';\r\n    var blocks = regexp_1.match_recursive(code, /\\{/g, /\\}/g);\r\n    var out = '';\r\n    out += blocks[0].value;\r\n    out += '{';\r\n    this.compile(blocks[1].value, ctx, function (err, res) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        out += res;\r\n        out += '}';\r\n        callback(null, out);\r\n    });\r\n}\r\nfunction compile_function(inside, ctx, callback) {\r\n    var left = inside.left.value.trim().substring(1);\r\n    callback(null, left + inside.value.trim() + '}');\r\n}\r\nfunction compile_if(inside, ctx, callback) {\r\n    var _this = this;\r\n    var code = 'if(' + inside.value + '}';\r\n    var blocks = regexp_1.match_recursive(code, /\\{/g, /\\}/g);\r\n    helpers_1.loop_async(blocks, function (block, i, array, callback) {\r\n        if (block.name == common_1.VALUE_NAME_OUTSIDE) {\r\n            return callback(null, block.value);\r\n        }\r\n        _this.compile(block.value, ctx, callback);\r\n    }, function (err, results) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, results.join(''));\r\n    });\r\n}\r\nfunction compile_section(inside, ctx, callback) {\r\n    var block = inside.value.trim();\r\n    var value = inside.left.value.trim();\r\n    var reg_name = /^@section\\s+([A-Za-z0-9]+)\\s*\\{/g;\r\n    var match = regexp_1.regexp_exec(value, reg_name);\r\n    if (!match || match.length > 2) {\r\n        return callback(new Error('Section parsing error'));\r\n    }\r\n    var name = match[1].trim();\r\n    if (ctx.__sections[name]) {\r\n        return callback(new Error('Section already exists'));\r\n    }\r\n    atat_1.atat.compile(block, ctx.options, function (err, template) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        template.__context.parent = ctx;\r\n        ctx.__sections[name] = template;\r\n        callback(null);\r\n    });\r\n}\r\nfunction compile_while(inside, ctx, callback) {\r\n    var code = 'while(' + inside.value + '}';\r\n    var blocks = regexp_1.match_recursive(code, /\\{/g, /\\}/g);\r\n    var out = '';\r\n    out += blocks[0].value;\r\n    out += '{';\r\n    this.compile(blocks[1].value, ctx, function (err, res) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        out += res;\r\n        out += '}';\r\n        callback(null, out);\r\n    });\r\n}\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AtatDefaultOpions = {\r\n    modelname: \"it\",\r\n    helpersname: \"$\",\r\n    basePath: \"\",\r\n    helpers: {}\r\n};\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AtatOptions_1 = require(\"./AtatOptions\");\r\nvar helpers_1 = require(\"./helpers\");\r\nvar regexp_1 = require(\"./regexp\");\r\nvar inline_1 = require(\"./inline\");\r\nvar tags_1 = require(\"./tags\");\r\nvar AtatContext = /** @class */ (function () {\r\n    function AtatContext(opts) {\r\n        var _this = this;\r\n        this.options = helpers_1.merge(AtatOptions_1.AtatDefaultOpions, opts);\r\n        this.output = '';\r\n        this.model = null;\r\n        this.helpers = helpers_1.merge(helpers_1.helpers, opts.helpers);\r\n        this.parts = [];\r\n        this.arguments = [\r\n            this.options.modelname,\r\n            this.options.helpersname,\r\n            'body'\r\n        ].join(',');\r\n        this.tags = helpers_1.get_tags(tags_1.tags);\r\n        this.inline = helpers_1.get_tags_inline(inline_1.inline_tags);\r\n        helpers_1.loop(tags_1.tags, function (compiler, regexp) {\r\n            _this.tags.compilers.push({\r\n                compiler: compiler,\r\n                regexp: new RegExp(regexp, 'g')\r\n            });\r\n        });\r\n        helpers_1.loop(inline_1.inline_tags, function (compiler, regexp) {\r\n            _this.tags.compilers.push({\r\n                compiler: compiler,\r\n                regexp: new RegExp(regexp, 'g')\r\n            });\r\n        });\r\n        this.__layout = null;\r\n        this.__partials = [];\r\n        this.__sections = {};\r\n        this.parent = null;\r\n    }\r\n    AtatContext.prototype.section = function (name) {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        return this.__sections[name] || (this.parent && this.parent.section(name));\r\n    };\r\n    AtatContext.prototype.compiler = function (str) {\r\n        if (str === void 0) { str = ''; }\r\n        for (var i = 0, l = this.tags.compilers.length; i < l; i++) {\r\n            var item = this.tags.compilers[i];\r\n            if (regexp_1.regexp_test(str, item.regexp)) {\r\n                return item.compiler;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    return AtatContext;\r\n}());\r\nexports.AtatContext = AtatContext;\r\n"],"sourceRoot":""}